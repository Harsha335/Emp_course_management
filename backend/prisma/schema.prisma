// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  emp_id             String      @id @unique // Primary Key
  email              String      @unique
  emp_name           String
  designation        Designation // Enum

  // Foreign key relation to User
  user User @relation(fields: [emp_id], references: [user_id], onDelete: Cascade)

  // Relationships
  CourseEnrollment CourseEnrollment[]
}

model Course {
  course_id        Int             @id @default(autoincrement()) // Primary Key
  course_name      String
  description      String // Added field
  duration         String
  difficulty_level DifficultyLevel // Enum for difficulty level
  course_img_url   String
  tags             String[]
  course_file_url  String

  // Relationships
  CourseEnrollment CourseEnrollment[]
  QuestionBank     QuestionBank[]

  @@unique([course_name, difficulty_level])
}

// Enum for difficulty level
enum DifficultyLevel {
  BASIC
  BEGINNER
  INTERMEDIATE
  EXPERT
}

model CourseEnrollment {
  enroll_id                    Int     @id @default(autoincrement()) // Primary Key
  emp_id                       String // Foreign key reference to Employee
  course_id                    Int // Foreign key reference to Course
  current_page                 Int?
  total_pages                   Int?
  test_score                   Float?
  course_certificate_url       String? // Optional certificate URL

  // Relationships
  employee           Employee             @relation(fields: [emp_id], references: [emp_id], onDelete: Cascade)
  course             Course               @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  AdminNotifications AdminNotifications[]
  CourseEngageLogs   CourseEngageLogs[]

  @@unique([emp_id, course_id]) // Prevent duplicate enrollments
}

model CourseEngageLogs {
  enroll_id                 Int
  start_time                DateTime
  time_spent_in_sec         Int

  // Relation to CourseEnrollment
  CourseEnrollment CourseEnrollment @relation(fields: [enroll_id], references: [enroll_id], onDelete: Cascade)

  @@unique([enroll_id, start_time]) // Prevent duplicate enrollments
}

model QuestionBank {
  test_id   String      @id @default(uuid()) // Changed to String with uuid generation
  course_id Int
  questions Questions[]

  // Relationships
  course Course @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
}

model Questions {
  question_id      Int      @id @default(autoincrement()) // Primary Key
  question         String // The question text
  options          String[] // Array of options (can be multiple)
  isMultipleChoice Boolean // Is it a multiple-choice question?
  answers          Int[] // Array of indices representing the correct answer(s)
  test_id          String // Foreign key to the QuestionBank

  // Foreign key relation to QuestionBank
  QuestionBank QuestionBank @relation(fields: [test_id], references: [test_id], onDelete: Cascade)
}

model AdminNotifications {
  notification_id Int     @id @default(autoincrement()) // Primary Key
  enroll_id       Int // Foreign key to CourseEnrollment
  status          Boolean?

  // Foreign key relation to CourseEnrollment
  CourseEnrollment CourseEnrollment @relation(fields: [enroll_id], references: [enroll_id], onDelete: Cascade)
}

model User {
  user_id  String @id @unique // Primary Key
  password String
  role     Role   @default(EMPLOYEE) // Default role is EMPLOYEE // Enum

  // Relationship to Employee (one-to-many)
  Employee Employee[]
}

// Enum for employee designation
enum Designation {
  SOFTWARE_ENGINEER
  SR_SOFTWARE_ENGINEER
  SOLUTION_ENABLER
  SOLUTION_CONSULTANT
  TECHNOLOGY_SOLUTION_ARCHITECT
  PRINCIPAL_SOLUTION_ARCHITECT
}

// Enum for user roles
enum Role {
  ADMIN
  EMPLOYEE
}
